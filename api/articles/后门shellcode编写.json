{"title":"后门Shellcode编写","slug":"后门shellcode编写","date":"2018-11-30T12:22:18.000Z","updated":"2018-11-30T12:28:53.071Z","comments":true,"path":"api/articles/后门shellcode编写.json","photos":[],"link":"","excerpt":null,"covers":["C:\\Users\\lenovo\\AppData\\Roaming\\Typora\\typora-user-images\\1543579663820.png","file:///C:\\Users\\lenovo\\AppData\\Local\\Temp\\ksohtml\\wps5235.tmp.jpg","file:///C:\\Users\\lenovo\\AppData\\Local\\Temp\\ksohtml\\wps5236.tmp.jpg","file:///C:\\Users\\lenovo\\AppData\\Local\\Temp\\ksohtml\\wps8A2F.tmp.jpg","file:///C:\\Users\\lenovo\\AppData\\Local\\Temp\\ksohtml\\wps8A30.tmp.jpg","file:///C:\\Users\\lenovo\\AppData\\Local\\Temp\\ksohtml\\wps8A31.tmp.jpg","file:///C:\\Users\\lenovo\\AppData\\Local\\Temp\\ksohtml\\wps4F28.tmp.jpg","file:///C:\\Users\\lenovo\\AppData\\Local\\Temp\\ksohtml\\wps4F29.tmp.jpg","file:///C:\\Users\\lenovo\\AppData\\Local\\Temp\\ksohtml\\wps4F2A.tmp.jpg","file:///C:\\Users\\lenovo\\AppData\\Local\\Temp\\ksohtml\\wps7EF5.tmp.jpg","file:///C:\\Users\\lenovo\\AppData\\Local\\Temp\\ksohtml\\wps7F06.tmp.jpg","file:///C:\\Users\\lenovo\\AppData\\Local\\Temp\\ksohtml\\wps7F07.tmp.jpg","file:///C:\\Users\\lenovo\\AppData\\Local\\Temp\\ksohtml\\wpsA954.tmp.jpg","file:///C:\\Users\\lenovo\\AppData\\Local\\Temp\\ksohtml\\wpsA956.tmp.jpg","file:///C:\\Users\\lenovo\\AppData\\Local\\Temp\\ksohtml\\wps840.tmp.jpg","file:///C:\\Users\\lenovo\\AppData\\Local\\Temp\\ksohtml\\wps841.tmp.jpg","file:///C:\\Users\\lenovo\\AppData\\Local\\Temp\\ksohtml\\wps842.tmp.jpg","file:///C:\\Users\\lenovo\\AppData\\Local\\Temp\\ksohtml\\wps34E0.tmp.jpg","file:///C:\\Users\\lenovo\\AppData\\Local\\Temp\\ksohtml\\wps34E1.tmp.jpg","file:///C:\\Users\\lenovo\\AppData\\Local\\Temp\\ksohtml\\wps7085.tmp.jpg","file:///C:\\Users\\lenovo\\AppData\\Local\\Temp\\ksohtml\\wps7086.tmp.jpg","file:///C:\\Users\\lenovo\\AppData\\Local\\Temp\\ksohtml\\wpsD099.tmp.jpg","file:///C:\\Users\\lenovo\\AppData\\Local\\Temp\\ksohtml\\wpsD0A9.tmp.jpg","file:///C:\\Users\\lenovo\\AppData\\Local\\Temp\\ksohtml\\wps2A92.tmp.jpg","file:///C:\\Users\\lenovo\\AppData\\Local\\Temp\\ksohtml\\wps2A93.tmp.jpg"],"content":"<h2 id=\"一、-实验目的\"><a href=\"#一、-实验目的\" class=\"headerlink\" title=\"一、 实验目的\"></a>一、 实验目的</h2><p>1.掌握后门shellcode编写。</p>\n<p>3.熟悉后门的整体思路。</p>\n<p>3.理解进程间通信和管道，了解客户服务程序工作流程。</p>\n<h2 id=\"二、-实验内容\"><a href=\"#二、-实验内容\" class=\"headerlink\" title=\"二、 实验内容\"></a>二、 实验内容</h2><p>1.后门shellcode的编写</p>\n<p>注： 双管道后门实现，反连后门编写。</p>\n<p>三、实验设备</p>\n<p>VMware Pro 14.0</p>\n<p>VC 6.0</p>\n<p>虚拟机：</p>\n<p>XP家庭版</p>\n<p>KaliLinux</p>\n<p>Ubuntu 1604</p>\n<p>XP的IP：<img src=\"C:\\Users\\lenovo\\AppData\\Roaming\\Typora\\typora-user-images\\1543579663820.png\" alt=\"1543579663820\"></p>\n<h2 id=\"三、-实验步骤\"><a href=\"#三、-实验步骤\" class=\"headerlink\" title=\"三、 实验步骤\"></a>三、 实验步骤</h2><h3 id=\"第一部分-双管道后门shellcode\"><a href=\"#第一部分-双管道后门shellcode\" class=\"headerlink\" title=\"第一部分  双管道后门shellcode\"></a>第一部分  双管道后门shellcode</h3><p>测试双管道后门C语言格式的代码</p>\n<p><img src=\"file:///C:\\Users\\lenovo\\AppData\\Local\\Temp\\ksohtml\\wps5235.tmp.jpg\" alt=\"img\"> </p>\n<p><img src=\"file:///C:\\Users\\lenovo\\AppData\\Local\\Temp\\ksohtml\\wps5236.tmp.jpg\" alt=\"img\"> </p>\n<p>好了，现在我们可以通过本机的linux上的telnet工具直接连上靶机，进入CMD操控，这就相当于只要让靶机偷偷运行了该程序，我们可以在攻击机上操控靶机了。接下来我们便要研究如何让其转shellcode。</p>\n<h4 id=\"获取相关函数的地址\"><a href=\"#获取相关函数的地址\" class=\"headerlink\" title=\"获取相关函数的地址\"></a><strong>获取相关函数的地址</strong></h4><p><img src=\"file:///C:\\Users\\lenovo\\AppData\\Local\\Temp\\ksohtml\\wps8A2F.tmp.jpg\" alt=\"img\"> </p>\n<h4 id=\"修改函数地址并运行\"><a href=\"#修改函数地址并运行\" class=\"headerlink\" title=\"修改函数地址并运行\"></a><strong>修改函数地址并运行</strong></h4><p><img src=\"file:///C:\\Users\\lenovo\\AppData\\Local\\Temp\\ksohtml\\wps8A30.tmp.jpg\" alt=\"img\"> </p>\n<p><img src=\"file:///C:\\Users\\lenovo\\AppData\\Local\\Temp\\ksohtml\\wps8A31.tmp.jpg\" alt=\"img\"> </p>\n<p><img src=\"file:///C:\\Users\\lenovo\\AppData\\Local\\Temp\\ksohtml\\wps4F28.tmp.jpg\" alt=\"img\"> </p>\n<h4 id=\"转为机器码\"><a href=\"#转为机器码\" class=\"headerlink\" title=\"转为机器码\"></a><strong>转为机器码</strong></h4><p><img src=\"file:///C:\\Users\\lenovo\\AppData\\Local\\Temp\\ksohtml\\wps4F29.tmp.jpg\" alt=\"img\"> </p>\n<p><img src=\"file:///C:\\Users\\lenovo\\AppData\\Local\\Temp\\ksohtml\\wps4F2A.tmp.jpg\" alt=\"img\"> </p>\n<h4 id=\"按地址取出机器码\"><a href=\"#按地址取出机器码\" class=\"headerlink\" title=\"按地址取出机器码\"></a><strong>按地址取出机器码</strong></h4><p><img src=\"file:///C:\\Users\\lenovo\\AppData\\Local\\Temp\\ksohtml\\wps7EF5.tmp.jpg\" alt=\"img\"> </p>\n<p><strong>套入shellcode运行模板中</strong></p>\n<p><img src=\"file:///C:\\Users\\lenovo\\AppData\\Local\\Temp\\ksohtml\\wps7F06.tmp.jpg\" alt=\"img\"> </p>\n<h4 id=\"测试连接，运行成功！\"><a href=\"#测试连接，运行成功！\" class=\"headerlink\" title=\"测试连接，运行成功！\"></a><strong>测试连接，运行成功！</strong></h4><p><img src=\"file:///C:\\Users\\lenovo\\AppData\\Local\\Temp\\ksohtml\\wps7F07.tmp.jpg\" alt=\"img\"> </p>\n<h3 id=\"第二部分-反连后门shellcode编写\"><a href=\"#第二部分-反连后门shellcode编写\" class=\"headerlink\" title=\"第二部分  反连后门shellcode编写\"></a>第二部分  <strong>反连后门shellcode编写</strong></h3><h4 id=\"测试C代码在靶机运行，然后用指定IP的linux监听830端口，连接成功。\"><a href=\"#测试C代码在靶机运行，然后用指定IP的linux监听830端口，连接成功。\" class=\"headerlink\" title=\"测试C代码在靶机运行，然后用指定IP的linux监听830端口，连接成功。\"></a><strong>测试C代码在靶机运行，然后用指定IP的linux监听830端口，连接成功。</strong></h4><p><img src=\"file:///C:\\Users\\lenovo\\AppData\\Local\\Temp\\ksohtml\\wpsA954.tmp.jpg\" alt=\"img\"> <img src=\"file:///C:\\Users\\lenovo\\AppData\\Local\\Temp\\ksohtml\\wpsA955.tmp.jpg\" alt=\"img\"></p>\n<h4 id=\"改写成汇编，先取出相关函数地址\"><a href=\"#改写成汇编，先取出相关函数地址\" class=\"headerlink\" title=\"改写成汇编，先取出相关函数地址\"></a><strong>改写成汇编，先取出相关函数地址</strong></h4><p><img src=\"file:///C:\\Users\\lenovo\\AppData\\Local\\Temp\\ksohtml\\wpsA956.tmp.jpg\" alt=\"img\"> </p>\n<h4 id=\"翻译成汇编时，应注意：\"><a href=\"#翻译成汇编时，应注意：\" class=\"headerlink\" title=\"翻译成汇编时，应注意：\"></a><strong>翻译成汇编时，应注意：</strong></h4><p><strong>①**</strong>取出IP和端口号的十六进制代码，并放入汇编中**</p>\n<p><img src=\"file:///C:\\Users\\lenovo\\AppData\\Local\\Temp\\ksohtml\\wps840.tmp.jpg\" alt=\"img\"> </p>\n<p><img src=\"file:///C:\\Users\\lenovo\\AppData\\Local\\Temp\\ksohtml\\wps841.tmp.jpg\" alt=\"img\"> </p>\n<p><strong>②WSASocket函数比Socket函数多三个参数，先push 3个0</strong> </p>\n<p><img src=\"file:///C:\\Users\\lenovo\\AppData\\Local\\Temp\\ksohtml\\wps842.tmp.jpg\" alt=\"img\"> </p>\n<p><strong>③用 WSAsocket 来替换cmd 的输入输出句柄</strong><img src=\"file:///C:\\Users\\lenovo\\AppData\\Local\\Temp\\ksohtml\\wps34E0.tmp.jpg\" alt=\"img\"></p>\n<h4 id=\"接着调试汇编代码，运行成功，现获取机器码。\"><a href=\"#接着调试汇编代码，运行成功，现获取机器码。\" class=\"headerlink\" title=\"接着调试汇编代码，运行成功，现获取机器码。\"></a><strong>接着调试汇编代码，运行成功，现获取机器码。</strong><img src=\"file:///C:\\Users\\lenovo\\AppData\\Local\\Temp\\ksohtml\\wps34E1.tmp.jpg\" alt=\"img\"></h4><h4 id=\"设置断点，找到汇编的开始和结尾处，按地址取机器码\"><a href=\"#设置断点，找到汇编的开始和结尾处，按地址取机器码\" class=\"headerlink\" title=\"设置断点，找到汇编的开始和结尾处，按地址取机器码\"></a><strong>设置断点，找到汇编的开始和结尾处，按地址取机器码</strong></h4><p><img src=\"file:///C:\\Users\\lenovo\\AppData\\Local\\Temp\\ksohtml\\wps7084.tmp.jpg\" alt=\"img\"> </p>\n<p><img src=\"file:///C:\\Users\\lenovo\\AppData\\Local\\Temp\\ksohtml\\wps7085.tmp.jpg\" alt=\"img\"> </p>\n<p><strong>取出后转成十六进制</strong></p>\n<p><img src=\"file:///C:\\Users\\lenovo\\AppData\\Local\\Temp\\ksohtml\\wps7086.tmp.jpg\" alt=\"img\"> </p>\n<h4 id=\"同理，放入shellcode的执行模板，测试结果，成功。\"><a href=\"#同理，放入shellcode的执行模板，测试结果，成功。\" class=\"headerlink\" title=\"同理，放入shellcode的执行模板，测试结果，成功。\"></a><strong>同理，放入shellcode的执行模板，测试结果，成功。</strong></h4><p><img src=\"file:///C:\\Users\\lenovo\\AppData\\Local\\Temp\\ksohtml\\wpsD099.tmp.jpg\" alt=\"img\"> </p>\n<h4 id=\"在linux上监听830端口\"><a href=\"#在linux上监听830端口\" class=\"headerlink\" title=\"在linux上监听830端口\"></a><strong>在linux上监听830端口</strong></h4><p><img src=\"file:///C:\\Users\\lenovo\\AppData\\Local\\Temp\\ksohtml\\wpsD0A9.tmp.jpg\" alt=\"img\"> </p>\n<h4 id=\"成功弹出CMD界面\"><a href=\"#成功弹出CMD界面\" class=\"headerlink\" title=\"成功弹出CMD界面\"></a><strong>成功弹出CMD界面</strong></h4><h2 id=\"五、-运行结果及分析\"><a href=\"#五、-运行结果及分析\" class=\"headerlink\" title=\"五、 运行结果及分析\"></a>五、 <strong>运行结果及分析</strong></h2><p>双管道后门中，Shellcode的功能主要为：在目标机器开一个Telnet 服务器，监听某个端口，然后等待攻击机来连接。当攻击机连接之后，为它开创一个cmd.exe，把攻击机的输入输出和cmd.exe的输入输出联系起来。但这种模式在有内部网络和外网的不同的环境中有所不足，且要攻击机主动telnet连接，无法实时监控靶机状态。</p>\n<p><img src=\"file:///C:\\Users\\lenovo\\AppData\\Local\\Temp\\ksohtml\\wps2A92.tmp.jpg\" alt=\"img\"> </p>\n<p>反向连接：通常的网络连接程序是由客户端通过服务器开放的端口连接到服务器，反向连接是客户端打开服务器端口，由服务器主动连接客户端。反向连接这种方式常用于绕过防火墙和路由器安全限制。一旦连接建立网络通讯，远程主机就可以向后门发送命令。这种通讯方法更有助于控制受控机器，也更不容易检测。</p>\n<p><img src=\"file:///C:\\Users\\lenovo\\AppData\\Local\\Temp\\ksohtml\\wps2A93.tmp.jpg\" alt=\"img\"> </p>\n<h2 id=\"六、-实验总结和感受\"><a href=\"#六、-实验总结和感受\" class=\"headerlink\" title=\"六、 实验总结和感受\"></a>六、 <strong>实验总结和感受</strong></h2><p>我之前一直以为平常我们的设备是较为安全的——谁会无聊到入侵我们这些普通学生的电子设备呢？但事与愿违，网络攻击的方式实在是花样百出，网络上报道的隐私资料被窃取的新闻报道亦是层出不穷。“吓”得我也给我所有的摄像头都贴上一块黑胶，以防被别人偷窥生活。</p>\n<p>事实证明，在网络攻防这场战役中，攻击者只要拿下靶机的root权限，就相当于斩敌将之首级，更准确地说，是让敌将成为你的傀儡，这也是傀儡机技术的关键所在。经过本课的了解和学习，我才明白要攻陷一个人的设备实在是太容易了，只要能套取到本人的那么一点点信任，让木马、病毒等的苗头扎根于设备之中，那么这台设备便沦陷了，绕过防火墙的检测亦不在话下。当然如今防黑客的技术也在不断进步，黑客技术和安全技术总是不断彼此促进的，在两者的平衡之中，我们的信息安全大体上还是有所保障的。</p>\n<p>网络攻防技术是一个实践性很强的学科，这次编写shellcode的过程中，由于对汇编的不熟、对计算机底层原理的陌生等原因，出现了很多让人头疼的bug，所幸的是最后还是完成了，这也让我学到了很多，对各个实验步骤也有了更深入的理解，要想学会更高级的攻防技术，我们还需掌握更多底层原理。</p>\n<p>人性的漏洞永远是最容易攻破的地方。因为计算机的漏洞是可以不断打补丁补上的，而人性却是难移的。能否保障自身设备上的信息安全，关键还得靠自己明辨是非。</p>\n","categories":[{"name":"study","slug":"study","count":1,"path":"api/categories/study.json"}],"tags":[{"name":"shellcode","slug":"shellcode","count":1,"path":"api/tags/shellcode.json"}]}