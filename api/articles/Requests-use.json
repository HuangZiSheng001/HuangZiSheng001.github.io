{"title":"Requests_use","slug":"Requests-use","date":"2018-11-29T13:54:44.000Z","updated":"2018-11-29T13:58:37.604Z","comments":true,"path":"api/articles/Requests-use.json","photos":[],"link":"","excerpt":"","covers":["优雅到骨子里的Requests.assets/1528811134432.png","优雅到骨子里的Requests.assets/1528811511456.png","优雅到骨子里的Requests.assets/1528811688447.png","优雅到骨子里的Requests.assets/24714864ebfe14c14ae18d61b0743f10_hd.jpg"],"content":"<h1 id=\"优雅到骨子里的Requests\"><a href=\"#优雅到骨子里的Requests\" class=\"headerlink\" title=\"优雅到骨子里的Requests\"></a>优雅到骨子里的Requests</h1><p><img src=\"优雅到骨子里的Requests.assets/1528811134432.png\" alt=\"1528811134432\"></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>上一篇文章介绍了Python的网络请求库<code>urllib</code>和<code>urllib3</code>的使用方法，那么，作为同样是网络请求库的<code>Requests</code>，相对于<code>urllib</code>，有什么优点呢？</p>\n<p>其实，只有两个词，简单优雅。</p>\n<p><code>Requests</code>的宣言就是：<strong>HTTP for Humans</strong>。可以说，<code>Requests</code>彻底贯彻了Python所代表的简单优雅的精神。</p>\n<p>之前的<code>urllib</code>做为Python的标准库，因为历史原因，使用的方式可以说是非常的麻烦而复杂的，而且官方文档也十分的简陋，常常需要去查看源码。与之相反的是，<code>Requests</code>的使用方式非常的简单、直观、人性化，让程序员的精力完全从库的使用中解放出来。</p>\n<p>甚至在官方的urllib.request的文档中，有这样一句话来推荐<code>Requests</code>：</p>\n<blockquote>\n<p>The <strong>Requests packageis</strong> recommended for a higher-level HTTP client interface.</p>\n</blockquote>\n<p><code>Requests</code>的官方文档同样也非常的完善详尽，而且少见的有中文官方文档：<a href=\"http://cn.python-requests.org/zh_CN/latest/。\" target=\"_blank\" rel=\"noopener\">http://cn.python-requests.org/zh_CN/latest/。</a></p>\n<p>英文文档：<a href=\"http://docs.python-requests.org/en/master/api/\" target=\"_blank\" rel=\"noopener\">http://docs.python-requests.org/en/master/api/</a></p>\n<p>当然，为了保证准确性，还是尽量查看英文文档为好。</p>\n<h2 id=\"作者\"><a href=\"#作者\" class=\"headerlink\" title=\"作者\"></a>作者</h2><p><code>Requests</code>的作者<strong>Kenneth Reitz</strong>同样是一个富有传奇色彩的人物。</p>\n<p><strong>Kenneth Reitz</strong>在有着“云服务鼻祖”之称的Heroku 公司，28岁时就担任了Python 语言的总架构师。他做了什么呢？随便列几个项目名称: requests、python-guide、pipenv、legit、autoenv，当然它也给Python界很多知名的开源项目贡献了代码，比如Flask。</p>\n<p>可以说他是Python领域举足轻重的人物，他的代码追求一种强迫症般的美感。</p>\n<p>大佬的传奇还不止于此，这是他当年在PyCON演讲时的照片：</p>\n<p><img src=\"优雅到骨子里的Requests.assets/1528811511456.png\" alt=\"1528811511456\"></p>\n<p>非常可爱的小胖子，同时也符合着大众对于程序员的一些刻板印象：胖、不太修边幅、腼腆。</p>\n<p>但是几年后，他变成了这样：</p>\n<p><img src=\"优雅到骨子里的Requests.assets/1528811688447.png\" alt=\"1528811688447\"></p>\n<p><img src=\"优雅到骨子里的Requests.assets/24714864ebfe14c14ae18d61b0743f10_hd.jpg\" alt=\"24714864ebfe14c14ae18d61b0743f10_hd\"></p>\n<p>emmmmm，帅哥，你这是去哪整的容？</p>\n<p>哈哈，开个玩笑。不过确实外貌方面的改变非常的巨大，由一个小肥宅的形象变得帅气潇洒。</p>\n<p>所以千万不要给自己懒散的生活态度，找任何借口。你可以变得更棒！ </p>\n<p>只要愿意去追求，我们都能变成我们想要的样子。</p>\n<h2 id=\"例子与特性\"><a href=\"#例子与特性\" class=\"headerlink\" title=\"例子与特性\"></a>例子与特性</h2><p>可以说<code>Requests</code>最大的特性就是其风格的简单直接优雅。无论是请求方法，还是响应结果的处理，还有cookies，url参数，post提交数据，都体现出了这种风格。</p>\n<p>以下是一个简单例子：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PYTHON\"><figure class=\"iseeu highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>resp = requests.get(<span class=\"string\">'https://www.baidu.com'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>resp.status_code</span><br><span class=\"line\"><span class=\"number\">200</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>resp.headers[<span class=\"string\">'content-type'</span>]</span><br><span class=\"line\"><span class=\"string\">'application/json; charset=utf8'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>resp.encoding</span><br><span class=\"line\"><span class=\"string\">'utf-8'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>resp.text</span><br><span class=\"line\"><span class=\"string\">u'&#123;\"type\":\"User\"...'</span></span><br></pre></td></tr></table></figure></div>\n<p>可以看到，不论是请求的发起还是相应的处理，都是非常直观明了的。</p>\n<p><code>Requests</code>目前基本上完全满足web请求的所有需求，以下是<code>Requests</code>的特性：</p>\n<ul>\n<li>Keep-Alive &amp; 连接池</li>\n<li>国际化域名和 URL</li>\n<li>带持久 Cookie 的会话</li>\n<li>浏览器式的 SSL 认证</li>\n<li>自动内容解码</li>\n<li>基本/摘要式的身份认证</li>\n<li>优雅的 key/value Cookie</li>\n<li>自动解压</li>\n<li>Unicode 响应体</li>\n<li>HTTP(S) 代理支持</li>\n<li>文件分块上传</li>\n<li>流下载</li>\n<li>连接超时</li>\n<li>分块请求</li>\n<li>支持 <code>.netrc</code></li>\n</ul>\n<p>而<code>Requests 3.0</code>目前也募集到了资金正在开发中，预计会支持async/await来实现并发请求，且可能会支持HTTP 2.0。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><code>Requests</code>的安装非常的简单，直接PIP安装即可：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PYTHON\"><figure class=\"iseeu highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install requests</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p><code>Requests</code>的请求不再像<code>urllib</code>一样需要去构造各种Request、opener和handler，使用<code>Requests</code>构造的方法，并在其中传入需要的参数即可。</p>\n<h3 id=\"发起请求\"><a href=\"#发起请求\" class=\"headerlink\" title=\"发起请求\"></a>发起请求</h3><h4 id=\"请求方法\"><a href=\"#请求方法\" class=\"headerlink\" title=\"请求方法\"></a>请求方法</h4><p>每一个请求方法都有一个对应的API，比如GET请求就可以使用<code>get()</code>方法：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PYTHON\"><figure class=\"iseeu highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>resp = requests.get(<span class=\"string\">'https://www.baidu.com'</span>)</span><br></pre></td></tr></table></figure></div>\n<p>而POST请求就可以使用<code>post()</code>方法，并且将需要提交的数据传递给data参数即可：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PYTHON\"><figure class=\"iseeu highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>resp = requests.post(<span class=\"string\">'http://httpbin.org/post'</span>, data = &#123;<span class=\"string\">'key'</span>:<span class=\"string\">'value'</span>&#125;)</span><br></pre></td></tr></table></figure></div>\n<p>而其他的请求类型，都有各自对应的方法：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PYTHON\"><figure class=\"iseeu highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>resp = requests.put(<span class=\"string\">'http://httpbin.org/put'</span>, data = &#123;<span class=\"string\">'key'</span>:<span class=\"string\">'value'</span>&#125;)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>resp = requests.delete(<span class=\"string\">'http://httpbin.org/delete'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>resp = requests.head(<span class=\"string\">'http://httpbin.org/get'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>resp = requests.options(<span class=\"string\">'http://httpbin.org/get'</span>)</span><br></pre></td></tr></table></figure></div>\n<p>非常的简单直观明了。</p>\n<hr>\n<h4 id=\"传递URL参数\"><a href=\"#传递URL参数\" class=\"headerlink\" title=\"传递URL参数\"></a>传递URL参数</h4><p>传递URL参数也不用再像<code>urllib</code>中那样需要去拼接URL，而是简单的，构造一个字典，并在请求时将其传递给params参数：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PYTHON\"><figure class=\"iseeu highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>params = &#123;<span class=\"string\">'key1'</span>: <span class=\"string\">'value1'</span>, <span class=\"string\">'key2'</span>: <span class=\"string\">'value2'</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>resp = requests.get(<span class=\"string\">\"http://httpbin.org/get\"</span>, params=params)</span><br></pre></td></tr></table></figure></div>\n<p>此时，查看请求的URL，则可以看到URL已经构造正确了：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(resp.url)</span><br><span class=\"line\">http://httpbin.org/get?key2=value2&amp;key1=value1</span><br></pre></td></tr></table></figure>\n<p>并且，有时候我们会遇到相同的url参数名，但有不同的值，而python的字典又不支持键的重名，那么我们可以把键的值用列表表示：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>params = &#123;<span class=\"string\">'key1'</span>: <span class=\"string\">'value1'</span>, <span class=\"string\">'key2'</span>: [<span class=\"string\">'value2'</span>, <span class=\"string\">'value3'</span>]&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>resp = requests.get(<span class=\"string\">'http://httpbin.org/get'</span>, params=params)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(resp.url)</span><br><span class=\"line\">http://httpbin.org/get?key1=value1&amp;key2=value2&amp;key2=value3</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"自定义Headers\"><a href=\"#自定义Headers\" class=\"headerlink\" title=\"自定义Headers\"></a>自定义Headers</h4><p>如果想自定义请求的Headers，同样的将字典数据传递给headers参数。</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PYTHON\"><figure class=\"iseeu highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>url = <span class=\"string\">'https://api.github.com/some/endpoint'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>headers = &#123;<span class=\"string\">'user-agent'</span>: <span class=\"string\">'my-app/0.0.1'</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>resp = requests.get(url, headers=headers)</span><br></pre></td></tr></table></figure></div>\n<h4 id=\"自定义Cookies\"><a href=\"#自定义Cookies\" class=\"headerlink\" title=\"自定义Cookies\"></a>自定义Cookies</h4><p><code>Requests</code>中自定义Cookies也不用再去构造CookieJar对象，直接将字典递给cookies参数。</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PYTHON\"><figure class=\"iseeu highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>url = <span class=\"string\">'http://httpbin.org/cookies'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>cookies = &#123;<span class=\"string\">'cookies_are'</span>: <span class=\"string\">'working'</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>resp = requests.get(url, cookies=cookies)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>resp.text</span><br><span class=\"line\"><span class=\"string\">'&#123;\"cookies\": &#123;\"cookies_are\": \"working\"&#125;&#125;'</span></span><br></pre></td></tr></table></figure></div>\n<h4 id=\"设置代理\"><a href=\"#设置代理\" class=\"headerlink\" title=\"设置代理\"></a>设置代理</h4><p>当我们需要使用代理时，同样构造代理字典，传递给<code>proxies</code>参数。</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PYTHON\"><figure class=\"iseeu highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">proxies = &#123;</span><br><span class=\"line\">  <span class=\"string\">'http'</span>: <span class=\"string\">'http://10.10.1.10:3128'</span>,</span><br><span class=\"line\">  <span class=\"string\">'https'</span>: <span class=\"string\">'http://10.10.1.10:1080'</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">requests.get(<span class=\"string\">'http://example.org'</span>, proxies=proxies)</span><br></pre></td></tr></table></figure></div>\n<h4 id=\"重定向\"><a href=\"#重定向\" class=\"headerlink\" title=\"重定向\"></a>重定向</h4><p>在网络请求中，我们常常会遇到状态码是3开头的重定向问题，在<code>Requests</code>中是默认开启允许重定向的，即遇到重定向时，会自动继续访问。</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PYTHON\"><figure class=\"iseeu highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>resp = requests.get(<span class=\"string\">'http://github.com'</span>, allow_redirects=<span class=\"keyword\">False</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>resp.status_code</span><br><span class=\"line\"><span class=\"number\">301</span></span><br></pre></td></tr></table></figure></div>\n<h4 id=\"禁止证书验证\"><a href=\"#禁止证书验证\" class=\"headerlink\" title=\"禁止证书验证\"></a>禁止证书验证</h4><p>有时候我们使用了抓包工具，这个时候由于抓包工具提供的证书并不是由受信任的数字证书颁发机构颁发的，所以证书的验证会失败，所以我们就需要关闭证书验证。</p>\n<p>在请求的时候把<code>verify</code>参数设置为<code>False</code>就可以关闭证书验证了。</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PYTHON\"><figure class=\"iseeu highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>resp = requests.get(<span class=\"string\">'http://httpbin.org/post'</span>, verify=<span class=\"keyword\">False</span>)</span><br></pre></td></tr></table></figure></div>\n<p>但是关闭验证后，会有一个比较烦人的<code>warning</code></p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PYTHON\"><figure class=\"iseeu highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">py:<span class=\"number\">858</span>: InsecureRequestWarning: Unverified HTTPS request <span class=\"keyword\">is</span> being made. Adding certificate verification <span class=\"keyword\">is</span> strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html<span class=\"comment\">#ssl-warnings</span></span><br><span class=\"line\">  InsecureRequestWarning)</span><br></pre></td></tr></table></figure></div>\n<p>可以使用以下方法关闭警告：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PYTHON\"><figure class=\"iseeu highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> requests.packages.urllib3.exceptions <span class=\"keyword\">import</span> InsecureRequestWarning</span><br><span class=\"line\"><span class=\"comment\"># 禁用安全请求警告</span></span><br><span class=\"line\">requests.packages.urllib3.disable_warnings(InsecureRequestWarning)</span><br></pre></td></tr></table></figure></div>\n<h4 id=\"设置超时\"><a href=\"#设置超时\" class=\"headerlink\" title=\"设置超时\"></a>设置超时</h4><p>设置访问超时，设置<code>timeout</code>参数即可。</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PYTHON\"><figure class=\"iseeu highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>requests.get(<span class=\"string\">'http://github.com'</span>, timeout=<span class=\"number\">0.001</span>)</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">\"&lt;stdin&gt;\"</span>, line <span class=\"number\">1</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">requests.exceptions.Timeout: HTTPConnectionPool(host=<span class=\"string\">'github.com'</span>, port=<span class=\"number\">80</span>): Request timed out. (timeout=<span class=\"number\">0.001</span>)</span><br></pre></td></tr></table></figure></div>\n<p>可见，通过<code>Requests</code>发起请求，只需要构造好几个需要的字典，并将其传入请求的方法中，即可完成基本的网络请求。</p>\n<h3 id=\"响应\"><a href=\"#响应\" class=\"headerlink\" title=\"响应\"></a>响应</h3><p>通过<code>Requests</code>发起请求获取到的，是一个<code>requests.models.Response</code>对象。通过这个对象我们可以很方便的获取响应的内容。</p>\n<h4 id=\"响应内容\"><a href=\"#响应内容\" class=\"headerlink\" title=\"响应内容\"></a>响应内容</h4><p>之前通过<code>urllib</code>获取的响应，读取的内容都是bytes的二进制格式，需要我们自己去将结果<code>decode()</code>一次转换成字符串数据。</p>\n<p>而<code>Requests</code>通过<code>text</code>属性，就可以获得字符串格式的响应内容。</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PYTHON\"><figure class=\"iseeu highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>resp = requests.get(<span class=\"string\">'https://api.github.com/events'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>resp.text</span><br><span class=\"line\"><span class=\"string\">u'[&#123;\"repository\":&#123;\"open_issues\":0,\"url\":\"https://github.com/...</span></span><br></pre></td></tr></table></figure></div>\n<p><code>Requests</code>会自动的根据响应的报头来猜测网页的编码是什么，然后根据猜测的编码来解码网页内容，基本上大部分的网页都能够正确的被解码。而如果发现<code>text</code>解码不正确的时候，就需要我们自己手动的去指定解码的编码格式。</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PYTHON\"><figure class=\"iseeu highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>resp = requests.get(<span class=\"string\">'https://api.github.com/events'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>resp.encoding = <span class=\"string\">'utf-8'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>resp.text</span><br><span class=\"line\"><span class=\"string\">u'[&#123;\"repository\":&#123;\"open_issues\":0,\"url\":\"https://github.com/...</span></span><br></pre></td></tr></table></figure></div>\n<p>而如果你需要获得原始的二进制数据，那么使用<code>content</code>属性即可。</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PYTHON\"><figure class=\"iseeu highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>resp.content</span><br><span class=\"line\"><span class=\"string\">b'[&#123;\"repository\":&#123;\"open_issues\":0,\"url\":\"https://github.com/...</span></span><br></pre></td></tr></table></figure></div>\n<p>如果我们访问之后获得的数据是JSON格式的，那么我们可以使用<code>json()</code>方法，直接获取转换成字典格式的数据。</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PYTHON\"><figure class=\"iseeu highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>resp = requests.get(<span class=\"string\">'https://api.github.com/events'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>resp.json()</span><br><span class=\"line\">[&#123;<span class=\"string\">u'repository'</span>: &#123;<span class=\"string\">u'open_issues'</span>: <span class=\"number\">0</span>, <span class=\"string\">u'url'</span>: <span class=\"string\">'https://github.com/...</span></span><br></pre></td></tr></table></figure></div>\n<h4 id=\"状态码\"><a href=\"#状态码\" class=\"headerlink\" title=\"状态码\"></a>状态码</h4><p>通过<code>status_code</code>属性获取响应的状态码</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PYTHON\"><figure class=\"iseeu highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>resp = requests.get(<span class=\"string\">'http://httpbin.org/get'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>resp.status_code</span><br><span class=\"line\"><span class=\"number\">200</span></span><br></pre></td></tr></table></figure></div>\n<h4 id=\"响应报头\"><a href=\"#响应报头\" class=\"headerlink\" title=\"响应报头\"></a>响应报头</h4><p>通过<code>headers</code>属性获取响应的报头</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PYTHON\"><figure class=\"iseeu highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>r.headers</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">'content-encoding'</span>: <span class=\"string\">'gzip'</span>,</span><br><span class=\"line\">    <span class=\"string\">'transfer-encoding'</span>: <span class=\"string\">'chunked'</span>,</span><br><span class=\"line\">    <span class=\"string\">'connection'</span>: <span class=\"string\">'close'</span>,</span><br><span class=\"line\">    <span class=\"string\">'server'</span>: <span class=\"string\">'nginx/1.0.4'</span>,</span><br><span class=\"line\">    <span class=\"string\">'x-runtime'</span>: <span class=\"string\">'148ms'</span>,</span><br><span class=\"line\">    <span class=\"string\">'etag'</span>: <span class=\"string\">'\"e1ca502697e5c9317743dc078f67693f\"'</span>,</span><br><span class=\"line\">    <span class=\"string\">'content-type'</span>: <span class=\"string\">'application/json'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<h4 id=\"服务器返回的cookies\"><a href=\"#服务器返回的cookies\" class=\"headerlink\" title=\"服务器返回的cookies\"></a>服务器返回的cookies</h4><p>通过<code>cookies</code>属性获取服务器返回的<code>cookies</code></p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PYTHON\"><figure class=\"iseeu highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>url = <span class=\"string\">'http://example.com/some/cookie/setting/url'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>resp = requests.get(url)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>resp.cookies[<span class=\"string\">'example_cookie_name'</span>]</span><br><span class=\"line\"><span class=\"string\">'example_cookie_value'</span></span><br></pre></td></tr></table></figure></div>\n<h4 id=\"url\"><a href=\"#url\" class=\"headerlink\" title=\"url\"></a>url</h4><p>还可以使用<code>url</code>属性查看访问的url。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>params = &#123;<span class=\"string\">'key1'</span>: <span class=\"string\">'value1'</span>, <span class=\"string\">'key2'</span>: <span class=\"string\">'value2'</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>resp = requests.get(<span class=\"string\">\"http://httpbin.org/get\"</span>, params=params)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(resp.url)</span><br><span class=\"line\">http://httpbin.org/get?key2=value2&amp;key1=value1</span><br></pre></td></tr></table></figure>\n<h3 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h3><p>在<code>Requests</code>中，实现了<code>Session(会话)</code>功能，当我们使用<code>Session</code>时，能够像浏览器一样，在没有关闭关闭浏览器时，能够保持住访问的状态。</p>\n<p>这个功能常常被我们用于登陆之后的数据获取，使我们不用再一次又一次的传递cookies。</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PYTHON\"><figure class=\"iseeu highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">session = requests.Session()</span><br><span class=\"line\"></span><br><span class=\"line\">session.get(<span class=\"string\">'http://httpbin.org/cookies/set/sessioncookie/123456789'</span>)</span><br><span class=\"line\">resp = session.get(<span class=\"string\">'http://httpbin.org/cookies'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(resp.text)</span><br><span class=\"line\"><span class=\"comment\"># '&#123;\"cookies\": &#123;\"sessioncookie\": \"123456789\"&#125;&#125;'</span></span><br></pre></td></tr></table></figure></div>\n<p>首先我们需要去生成一个<code>Session</code>对象，然后用这个<code>Session</code>对象来发起访问，发起访问的方法与正常的请求是一摸一样的。</p>\n<p>同时，需要注意的是，如果是我们在<code>get()</code>方法中传入<code>headers</code>和<code>cookies</code>等数据，那么这些数据只在当前这一次请求中有效。如果你想要让一个<code>headers</code>在<code>Session</code>的整个生命周期内都有效的话，需要用以下的方式来进行设置：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PYTHON\"><figure class=\"iseeu highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置整个headers</span></span><br><span class=\"line\">session.headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">'user-agent'</span>: <span class=\"string\">'my-app/0.0.1'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 增加一条headers</span></span><br><span class=\"line\">session.headers.update(&#123;<span class=\"string\">'x-test'</span>: <span class=\"string\">'true'</span>&#125;)</span><br></pre></td></tr></table></figure></div>\n","categories":[],"tags":[]}